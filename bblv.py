import requests
from bs4 import BeautifulSoup
from html_table_parser import parser_functions as parse
import pandas as pd
from math import ceil

# This function gets a list of all possible license categories
def get_categories():
    # The license categories can be found in the html of any category page,
    # so we will get the html of the 'Ambulance' category page
    html = category_request('Ambulance')
    soup = BeautifulSoup(html, 'html.parser')
    # Find all the items with the <options> tag (these are the options in the
    # drop down menu)
    options = soup.findAll('option')
    # Create an empty list and append each category to it
    categories = []
    for category in options:
	       categories.append(category.renderContents())
    # The first <option> tag is an empty string, so we drop that one
    del categories[0]
    # Return the list of categories
    return categories

# This function sends a POST request to the server to get a specific category
# and page number's results
def category_request(category,pagenum='Page$1'):
    headers = {'Accept-Encoding':'gzip, deflate',
        'Accept-Language':'en-US,en;q=0.8','Cache-Control':'no-cache',
        'Connection':'keep-alive','Content-Length':'43787',
        'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
        'Host':'pivs.dcra.dc.gov','Origin':'http://pivs.dcra.dc.gov',
        'Referer':'http://pivs.dcra.dc.gov//BBLV/Default.aspx',
        'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36',
        'X-MicrosoftAjax':'Delta=true','X-Requested-With':'XMLHttpRequest'}
    # 'DropDownListCategory' and '__EVENTARGUMENT' are the two values we need to
    # manipulate to get specific results
    payload = {'DropDownListCategory':category,'__EVENTARGUMENT':pagenum,
        '__EVENTTARGET':'CategoryGridView','Sc1':'ctl02|CategoryGridView',
        'Sc1_HiddenField':';;AjaxControlToolkit, Version=4.1.7.429, Culture=neutral, PublicKeyToken=28f01b0e84b6d53e:en-US:88c49a6a-0d1d-47b4-940b-08a788536015:de1feab2:f2c8e708:720a52bf:f9cec9bc:589eaa30:698129cf:7a92f56c',
        '__SCROLLPOSITIONX':'0','__SCROLLPOSITIONY':'0',
        'hiddenInputToUpdateATBuffer_CommonToolkitScripts':'1',
        '__ASYNCPOST':'true','__LASTFOCUS':'',
        '__VIEWSTATE':''}
    # Define the URL we will be sending the request to
    url = 'http://pivs.dcra.dc.gov//BBLV/Default.aspx'
    # Create a request and send it to the server with our specified arguments
    s = requests.Session()
    content = s.post(url, data=payload, headers=headers)
    # Get the html and return it
    html = content.content
    return html

# This function finds the number of pages the results are split into
def find_num_pages(html):
    # Create a BeautifulSoup object of the html
    soup = BeautifulSoup(html,'html.parser')
    # Find the number of records returned for this category
    num_records_str = soup.find('span',
                                {'id':'DropDownrowCount',
                                 'class':'DropDownrowCount',
                                 'style':'font-size:Small;font-weight:bold;'})
    num_records_str = num_records_str.renderContents()
    # Get just the number and convert to int
    num_records = int(num_records_str.split(': ')[1])
    # There can be a max of 20 results per page
    if num_records <= 20:
        pages = 1
    else:
        # If there are more than 20, we divide num_records by 20 and round up
        # to the next integer
        pages = int(ceil(num_records/20.0))
    return pages

# This function scrapes the records information for a single page for a category
def scrape_category(html,multiple_pages):
    # Create a BeautifulSoup object of the html
    soup = BeautifulSoup(html,'html.parser')
    # Find the table which contains the records information
    table = soup.find('table',
                      {'cellspacing':'5','cellpadding':'5','rules':'all',
                       'border':'1','id':'CategoryGridView',
                       'style':'color:#333333;width:968px;'})
    # If the category doesn't contain any records, there isn't a matching
    # <table> tag, so table is NoneType
    if table is not None:
        # Convert the <table> html to a two-dimensional array
        twodim_table = parse.make2d(table)
        # If there are multiple pages of results for the category there will be
        # two extra rows of information that we want to delete (these rows
        # contain the links to the next pages)
        if multiple_pages:
            # Find the length of our array and delete the last two indexes
            table_length = len(twodim_table)
            del twodim_table[table_length-1]
            del twodim_table[table_length-2]
        # Convert our two-dimensional array to a DataFrame
        table_df = pd.DataFrame(twodim_table)
        # The column names are currently in the first row, we want to set the
        # columns equal to this row and then delete the row
        table_df.columns = table_df.iloc[0]
        table_df.drop(0,inplace=True)
    else:
        # If there are no results, we create an empty DataFrame
        table_df = pd.DataFrame(columns=cols)
    # Return the DataFrame containing this pages results
    return table_df

# Find all of the possible categories
categories = get_categories()

# Define the column names
cols = ['License #', 'Corporate Name', 'Trade Name', 'Expiration Date',
        'Description', 'First Name', 'Last Name', 'Business Address']
# Create our master DataFrame which we will append each categories results to
all_categories = pd.DataFrame(columns=cols)

# Iterate through our categories and scrape the results for each
for category in categories:
    # Get the html result for this category
    # We don't specify a page number here because we want to scrape the first
    # page to see how many results there are
    cat_html = category_request(category)
    # Determine the number of pages this category has
    pages = find_num_pages(cat_html)
    if pages == 1:
        # If there is only one page we scrape that page
        cat_df = scrape_category(cat_html,False)
    else:
        # If there is more than one page we create a blank DataFrame which we
        # will append each individual page's results to
        cat_df = pd.DataFrame(columns=cols)
        # Iterate through each page
        for i in range(1,pages+1):
            # Define our page variable that we pass to category_request()
            page = 'Page$'+str(i)
            # Get the html result for this page
            page_html = category_request(category,page)
            # Scrape the specified page
            page_df = scrape_category(page_html,True)
            # Concat the page's results to this category's DataFrame
            cat_df = pd.concat([cat_df,page_df],axis=0)
    # Concat this category's results to our master DataFrame
    all_categories = pd.concat([all_categories,cat_df],axis=0)
    # Print a message so we can keep track of the script's progress
    # (The categories with a lot of pages can take a couple minutes)
    print 'Done',category
